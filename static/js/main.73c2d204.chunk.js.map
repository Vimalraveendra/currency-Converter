{"version":3,"sources":["redux/currency/currency.type.js","redux/currency/currency.selectors.js","redux/converterlist/converterlist.types.js","components/currency-list/CurrencyList.jsx","redux/currency/currency.action.js","redux/converterlist/converterlist.actions.js","components/converter-list/ConvertedList.jsx","redux/converter/converter.types.js","components/converter/Converter.jsx","redux/converter/converter.actions.js","page/homepage/HomePage.jsx","App.js","serviceWorker.js","redux/currency/currency.reducer.js","redux/converterlist/converterlist.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["currencyActionTypes","SET_TOGGLE_HIDDEN","selectCurrencyList","createSelector","state","converterlist","currencyList","selectCurrencySum","reduce","acc","sum","result","toFixed","selectCurrencyLarge","Math","max","map","item","convertedTo","converterListActionTypes","ADD_CURRENCY","CLEAR_CURRENCY","REMOVE_CURRENCY","HANDLE_INPUT","HANDLE_CHANGE","HANDLE_SWAP","connect","hidden","currency","currencySum","currencyLarge","dispatch","toggleSum","type","clearCurrency","payload","removeCurrency","id","Fragment","className","key","onClick","addCurrency","currencies","amount","base","handleChange","handleInput","handleSwap","value","onChange","name","index","uuid","Number","converterActionTypes","REQUEST_RATES_PENDING","REQUEST_RATES_SUCCESS","REQUEST_RATES_FAILED","Converter","date","rates","event","target","setState","getCurrency","isNaN","fetch","then","resp","json","data","push","newDate","catch","err","console","log","message","this","React","Component","requestCurrency","response","converterActionTypesREQUEST_RATES_SUCCESS","error","HomePage","App","Boolean","window","location","hostname","match","INITIAL_STATE","currencyReducer","action","fields","converterListReducer","filter","currencyItem","combineReducers","converterlistReducer","middlewares","logger","thunkMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73c2d204.chunk.js","sourcesContent":["const currencyActionTypes = {\n  SET_TOGGLE_HIDDEN: \"SET_TOGGLE_HIDDEN\"\n};\n\nexport default currencyActionTypes;\n","import { createSelector } from \"reselect\";\n\nconst selectConverterList = state => state.converterlist;\n\nexport const selectCurrencyList = createSelector(\n  [selectConverterList],\n  converterlist => converterlist.currencyList\n);\n\nexport const selectCurrencySum = createSelector(\n  [selectCurrencyList],\n  currencyList =>\n    currencyList.reduce((acc, sum) => acc + sum.result, 0).toFixed(2)\n);\n\nexport const selectCurrencyLarge = createSelector(\n  [selectCurrencyList],\n  currencyList =>\n    Math.max(\n      ...currencyList.map(item =>\n        item.convertedTo === \"PLN\" ? item.result.toFixed(2) : null\n      )\n    )\n);\n","const converterListActionTypes = {\n  ADD_CURRENCY: \"ADD_CURRENCY\",\n  CLEAR_CURRENCY: \"CLEAR_CURRENCY\",\n  REMOVE_CURRENCY: \"REMOVE_CURRENCY\",\n  HANDLE_INPUT: \"HANDLE_INPUT\",\n  HANDLE_CHANGE: \"HANDLE_CHANGE\",\n  HANDLE_SWAP: \"HANDLE_SWAP\"\n};\n\nexport default converterListActionTypes;\n","import React from \"react\";\nimport \"./CurrencyList.scss\";\nimport { connect } from \"react-redux\";\nimport { setToggleSum } from \"../../redux/currency/currency.action\";\nimport {\n  selectCurrencyList,\n  selectCurrencySum,\n  selectCurrencyLarge\n} from \"../../redux/currency/currency.selectors\";\n\nimport {\n  clearCurrency,\n  removeCurrency\n} from \"../../redux/converterlist/converterlist.actions\";\n\nconst CurrencyList = ({\n  currencyList,\n  clearCurrency,\n  removeCurrency,\n  currencySum,\n  currencyLarge,\n  hidden,\n  toggleSum\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"currency-list\">\n        <ul className=\"currency-item\">\n          {currencyList.map(({ id, convertedTo, result }) => {\n            return (\n              <li className=\"item\" key={id}>\n                <span className=\"left-push\">{convertedTo}</span>\n                <span className=\"right-push\">{result}</span>\n                <span\n                  className=\"remove-item\"\n                  onClick={() => removeCurrency(id)}\n                >\n                  {\" \"}\n                  &#10060;\n                </span>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      {hidden ? null : (\n        <h5 className=\"sum\">\n          Sum:{currencySum}\n          <span className=\"largest\">Largest:{currencyLarge}</span>\n        </h5>\n      )}\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"btn danger\"\n          onClick={() => clearCurrency(currencyList)}\n        >\n          Clear All\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => {\n            toggleSum();\n          }}\n        >\n          Sum\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = state => ({\n  hidden: state.currency.hidden,\n  currencyList: selectCurrencyList(state),\n  currencySum: selectCurrencySum(state),\n  currencyLarge: selectCurrencyLarge(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleSum: () => dispatch(setToggleSum()),\n  clearCurrency: currencyList => dispatch(clearCurrency(currencyList)),\n  removeCurrency: id => dispatch(removeCurrency(id))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencyList);\n","import currencyActionTypes from \"./currency.type\";\n\nexport const setToggleSum = () => ({\n  type: currencyActionTypes.SET_TOGGLE_HIDDEN\n});\n","import converterListActionTypes from \"./converterlist.types\";\n\nexport const addCurrency = item => ({\n  type: converterListActionTypes.ADD_CURRENCY,\n  payload: item\n});\n\nexport const clearCurrency = item => ({\n  type: converterListActionTypes.CLEAR_CURRENCY,\n  payload: item\n});\n\nexport const removeCurrency = id => ({\n  type: converterListActionTypes.REMOVE_CURRENCY,\n  payload: id\n});\n\nexport const handleInput = event => ({\n  type: converterListActionTypes.HANDLE_INPUT,\n  payload: Number(event)\n});\n\nexport const handleChange = event => ({\n  type: converterListActionTypes.HANDLE_CHANGE,\n  payload: event\n});\n\nexport const handleSwap = event => ({\n  type: converterListActionTypes.HANDLE_SWAP,\n  payload: event\n});\n","import React from \"react\";\nimport \"./ConvertedList.scss\";\nimport CurrencyList from \"../currency-list/CurrencyList\";\nimport { connect } from \"react-redux\";\nimport { addCurrency } from \"../../redux/converterlist/converterlist.actions\";\nimport uuid from \"uuid\";\n\nconst ConvertedList = ({\n  currencies,\n  amount,\n  convertedTo,\n  base,\n  handleChange,\n  handleInput,\n  addCurrency,\n  handleSwap,\n  result,\n  id\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"input-item\">\n        <input\n          className=\"input\"\n          type=\"number\"\n          value={amount}\n          onChange={handleInput}\n        />\n\n        <select\n          className=\"options\"\n          name=\"base\"\n          value={base}\n          onChange={handleChange}\n        >\n          {<option className=\"option\">{base}</option>}\n        </select>\n      </div>\n      <div className=\"input-item\">\n        <input\n          className=\"input\"\n          type=\"number\"\n          value={result}\n          onChange={handleInput}\n        />\n        <select\n          className=\"options  \"\n          name=\"convertedTo\"\n          value={convertedTo}\n          onChange={handleChange}\n        >\n          {currencies.map((currency, index) => (\n            <option key={index}>{currency}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"input-item\">\n        <button\n          type=\"submit\"\n          className=\"btn\"\n          onClick={() =>\n            addCurrency({\n              base: base,\n              id: uuid(),\n              convertedTo: convertedTo,\n              amount: Number(amount),\n              result: Number(result)\n            })\n          }\n        >\n          Add Item\n        </button>\n        <h1 className=\"swap\" onClick={handleSwap}>\n          &#8595;&#8593;\n        </h1>\n      </div>\n      <CurrencyList />\n    </React.Fragment>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addCurrency: item => dispatch(addCurrency(item))\n});\n\nexport default connect(null, mapDispatchToProps)(ConvertedList);\n","const converterActionTypes = {\n  REQUEST_RATES_PENDING: \"REQUEST_RATES_PENDING\",\n  REQUEST_RATES_SUCCESS: \"REQUEST_RATES_SUCCESS\",\n  REQUEST_RATES_FAILED: \"REQUEST_RATES_FAILED\"\n};\n\nexport default converterActionTypes;\n","import React from \"react\";\nimport \"./Converter.scss\";\nimport ConvertedList from \"../converter-list/ConvertedList\";\nimport uuid from \"uuid\";\nimport { connect } from \"react-redux\";\nimport { requestCurrencyRates } from \"../../redux/converter/converter.actions\";\n\nclass Converter extends React.Component {\n  state = {\n    currencies: [],\n    id: uuid(),\n    amount: 1,\n    base: \"EUR\",\n    result: \"\",\n    date: \"\",\n    convertedTo: \"PLN\",\n    rates: {}\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value }, this.getCurrency);\n  };\n\n  handleInput = event => {\n    this.setState(\n      {\n        amount: event.target.value\n      },\n      this.getCurrency\n    );\n  };\n\n  componentDidMount() {\n    this.getCurrency();\n  }\n\n  handleSwap = () => {\n    const { convertedTo, base } = this.state;\n\n    this.setState(\n      {\n        convertedTo: base,\n        base: convertedTo\n      },\n      this.getCurrency\n    );\n  };\n\n  getCurrency = () => {\n    const { amount, base, convertedTo, currencies } = this.state;\n    if (amount === isNaN) {\n      return;\n    } else {\n      fetch(`https://api.exchangeratesapi.io/latest?base=${base}`)\n        .then(resp => resp.json())\n        .then(data => {\n          const result = (data.rates[convertedTo] * amount).toFixed(2);\n          const rates = data.rates;\n          for (const key in rates) {\n            currencies.push(key);\n          }\n          const newDate = data.date;\n          this.setState({\n            result,\n            date: newDate,\n            rates\n          });\n        })\n        .catch(err => {\n          console.log(\"Oops\", err.message);\n        });\n    }\n  };\n  render() {\n    const { currencies, amount, base, result, date, convertedTo } = this.state;\n    const { handleChange, handleInput, handleSwap } = this;\n\n    return (\n      <div className=\"converter\">\n        <div className=\"converter-content\">\n          <h1 className=\"title\">Currency Converter </h1>\n          <h3 className=\"subtitle\">\n            {amount}\n            {base} equals:\n            <span>\n              {result} {convertedTo}\n            </span>\n          </h3>\n          <h3 className=\"date\">{date}</h3>\n\n          <ConvertedList\n            currencies={currencies}\n            amount={amount}\n            base={base}\n            result={result}\n            convertedTo={convertedTo}\n            handleChange={handleChange}\n            handleInput={handleInput}\n            handleSwap={handleSwap}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  converterlist: { amount, base, currencies, convertedTo, date, id }\n}) => ({\n  amount,\n  base,\n  date,\n  currencies,\n  convertedTo,\n  id\n});\n\nconst mapDispatachToProps = dispatch => ({\n  requestCurrency: () => dispatch(requestCurrencyRates())\n});\nexport default connect(mapStateToProps, mapDispatachToProps)(Converter);\n","import converterActionTypes from \"./converter.types\";\n\nexport const requestCurrencyRates = () => dispatch => {\n  dispatch({ type: converterActionTypes.REQUEST_RATES_PENDING });\n  fetch(`https://api.exchangeratesapi.io/latest?base=EUR`)\n    .then(response => response.json())\n    .then(data =>\n      dispatch({\n        type: converterActionTypes.converterActionTypesREQUEST_RATES_SUCCESS,\n        payload: data\n      })\n    )\n    .catch(error =>\n      dispatch({\n        type: converterActionTypes.REQUEST_RATES_FAILED,\n        payload: error\n      })\n    );\n};\n","import React from \"react\";\nimport \"./HomePage.scss\";\nimport Converter from \"../../components/converter/Converter\";\nconst HomePage = () => {\n  return (\n    <div className=\"homepage\">\n      <Converter />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./page/homepage/HomePage\";\n\nfunction App() {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import currencyActionTypes from \"./currency.type\";\n\nconst INITIAL_STATE = {\n  hidden: true\n};\n\nconst currencyReducer = (state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case currencyActionTypes.SET_TOGGLE_HIDDEN: {\n      return {\n        ...state,\n        hidden: !state.hidden\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default currencyReducer;\n","import converterListActionTypes from \"./converterlist.types\";\nimport uuid from \"uuid\";\nconst INITIAL_STATE = {\n  currencyList: [],\n  currencies: [],\n  amount: 1,\n  fields: {},\n  id: uuid(),\n  base: \"EUR\",\n  result: \"\",\n  date: \"\",\n  convertedTo: \"PLN\",\n  rates: {}\n};\n\nconst converterListReducer = (state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case converterListActionTypes.ADD_CURRENCY: {\n      return {\n        ...state,\n        currencyList: [...state.currencyList, action.payload]\n      };\n    }\n    case converterListActionTypes.CLEAR_CURRENCY: {\n      return {\n        ...state,\n        currencyList: state.currencyList.filter(\n          (currencyItem, index) => currencyItem.id !== action.payload[index].id\n        )\n      };\n    }\n    case converterListActionTypes.REMOVE_CURRENCY: {\n      return {\n        ...state,\n        currencyList: state.currencyList.filter(\n          currencyItem => currencyItem.id !== action.payload\n        )\n      };\n    }\n    case converterListActionTypes.HANDLE_INPUT: {\n      return {\n        ...state,\n        amount: action.payload\n      };\n    }\n    case converterListActionTypes.HANDLE_CHANGE: {\n      return {\n        ...state,\n        fields: {\n          ...state.fields,\n          [action.name]: action.value\n        }\n      };\n    }\n\n    case converterListActionTypes.HANDLE_SWAP: {\n      return {\n        ...state,\n        amount: action.payload\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default converterListReducer;\n","import { combineReducers } from \"redux\";\n\nimport currencyReducer from \"./currency/currency.reducer\";\nimport converterlistReducer from \"./converterlist/converterlist.reducer\";\n\nexport default combineReducers({\n  currency: currencyReducer,\n  converterlist: converterlistReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst middlewares = [logger, thunkMiddleware];\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}