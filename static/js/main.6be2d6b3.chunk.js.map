{"version":3,"sources":["redux/currency/currency.type.js","redux/currency/currency.selectors.js","redux/converterlist/converterlist.types.js","redux/converterlist/converterlist.actions.js","components/currency-list/CurrencyList.jsx","redux/currency/currency.action.js","components/converter-list/ConvertedList.jsx","components/converter/Converter.jsx","page/homepage/HomePage.jsx","App.js","serviceWorker.js","redux/currency/currency.reducer.js","redux/converterlist/converterlist.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["currencyActionTypes","SET_TOGGLE_HIDDEN","selectCurrencyList","createSelector","state","converterlist","currencyList","selectCurrencySum","reduce","acc","sum","result","toFixed","selectCurrencyLarge","Math","max","map","item","convertedTo","converterListActionTypes","ADD_CURRENCY","CLEAR_CURRENCY","REMOVE_CURRENCY","HANDLE_INPUT","HANDLE_CHANGE","HANDLE_SWAP","REQUEST_RATES_PENDING","REQUEST_RATES_SUCCESS","REQUEST_RATES_FAILED","requestCurrencyRates","base","amount","dispatch","isNaN","type","fetch","then","response","json","data","payload","catch","error","connect","hidden","currency","currencySum","currencyLarge","toggleSum","clearCurrency","removeCurrency","id","Fragment","className","key","onClick","currencies","addCurrency","handleInput","event","target","value","handleChange","handleSwap","getCurrency","onChange","name","index","uuid","Number","Converter","this","props","date","React","Component","HomePage","App","Boolean","window","location","hostname","match","INITIAL_STATE","currencyReducer","action","isPending","converterListReducer","filter","currencyItem","Object","keys","rates","combineReducers","converterlistReducer","middlewares","thunkMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6be2d6b3.chunk.js","sourcesContent":["const currencyActionTypes = {\n  SET_TOGGLE_HIDDEN: \"SET_TOGGLE_HIDDEN\"\n};\n\nexport default currencyActionTypes;\n","import { createSelector } from \"reselect\";\n\nconst selectConverterList = state => state.converterlist;\n\nexport const selectCurrencyList = createSelector(\n  [selectConverterList],\n  converterlist => converterlist.currencyList\n);\n\nexport const selectCurrencySum = createSelector(\n  [selectCurrencyList],\n  currencyList =>\n    currencyList.reduce((acc, sum) => acc + sum.result, 0).toFixed(2)\n);\n\nexport const selectCurrencyLarge = createSelector(\n  [selectCurrencyList],\n  currencyList =>\n    Math.max(\n      ...currencyList.map(item =>\n        item.convertedTo === \"PLN\" ? item.result.toFixed(2) : null\n      )\n    )\n);\n","const converterListActionTypes = {\n  ADD_CURRENCY: \"ADD_CURRENCY\",\n  CLEAR_CURRENCY: \"CLEAR_CURRENCY\",\n  REMOVE_CURRENCY: \"REMOVE_CURRENCY\",\n  HANDLE_INPUT: \"HANDLE_INPUT\",\n  HANDLE_CHANGE: \"HANDLE_CHANGE\",\n  HANDLE_SWAP: \"HANDLE_SWAP\",\n  REQUEST_RATES_PENDING: \"REQUEST_RATES_PENDING\",\n  REQUEST_RATES_SUCCESS: \"REQUEST_RATES_SUCCESS\",\n  REQUEST_RATES_FAILED: \"REQUEST_RATES_FAILED\"\n};\n\nexport default converterListActionTypes;\n","import converterListActionTypes from \"./converterlist.types\";\n\nexport const requestCurrencyRates = (base, amount) => dispatch => {\n  if (amount === isNaN) {\n    return;\n  } else {\n    dispatch({ type: converterListActionTypes.REQUEST_RATES_PENDING });\n    fetch(`https://api.exchangeratesapi.io/latest?base=${base}`)\n      .then(response => response.json())\n      .then(data =>\n        dispatch({\n          type: converterListActionTypes.REQUEST_RATES_SUCCESS,\n          payload: data\n        })\n      )\n      .catch(error =>\n        dispatch({\n          type: converterListActionTypes.REQUEST_RATES_FAILED,\n          payload: error\n        })\n      );\n  }\n};\n\nexport const addCurrency = item => ({\n  type: converterListActionTypes.ADD_CURRENCY,\n  payload: item\n});\n\nexport const clearCurrency = item => ({\n  type: converterListActionTypes.CLEAR_CURRENCY,\n  payload: item\n});\n\nexport const removeCurrency = id => ({\n  type: converterListActionTypes.REMOVE_CURRENCY,\n  payload: id\n});\n\nexport const handleInput = event => ({\n  type: converterListActionTypes.HANDLE_INPUT,\n  payload: event\n});\n\nexport const handleChange = event => ({\n  type: converterListActionTypes.HANDLE_CHANGE,\n  payload: event\n});\n\nexport const handleSwap = () => ({\n  type: converterListActionTypes.HANDLE_SWAP\n});\n","import React from \"react\";\nimport \"./CurrencyList.scss\";\nimport { connect } from \"react-redux\";\nimport { setToggleSum } from \"../../redux/currency/currency.action\";\nimport {\n  selectCurrencyList,\n  selectCurrencySum,\n  selectCurrencyLarge\n} from \"../../redux/currency/currency.selectors\";\n\nimport {\n  clearCurrency,\n  removeCurrency\n} from \"../../redux/converterlist/converterlist.actions\";\n\nconst CurrencyList = ({\n  currencyList,\n  clearCurrency,\n  removeCurrency,\n  currencySum,\n  currencyLarge,\n  hidden,\n  toggleSum\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"currency-list\">\n        <ul className=\"currency-item\">\n          {currencyList.map(({ id, convertedTo, result }) => {\n            return (\n              <li className=\"item\" key={id}>\n                <span className=\"left-push\">{convertedTo}</span>\n                <span className=\"right-push\">{result}</span>\n                <span\n                  className=\"remove-item\"\n                  onClick={() => removeCurrency(id)}\n                >\n                  {\" \"}\n                  &#10060;\n                </span>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      {hidden ? null : (\n        <h5 className=\"sum\">\n          Sum:{currencySum}\n          <span className=\"largest\">Largest:{currencyLarge}</span>\n        </h5>\n      )}\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"btn danger\"\n          onClick={() => clearCurrency(currencyList)}\n        >\n          Clear All\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => {\n            toggleSum();\n          }}\n        >\n          Sum\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = state => ({\n  hidden: state.currency.hidden,\n  currencyList: selectCurrencyList(state),\n  currencySum: selectCurrencySum(state),\n  currencyLarge: selectCurrencyLarge(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleSum: () => dispatch(setToggleSum()),\n  clearCurrency: currencyList => dispatch(clearCurrency(currencyList)),\n  removeCurrency: id => dispatch(removeCurrency(id))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencyList);\n","import currencyActionTypes from \"./currency.type\";\n\nexport const setToggleSum = () => ({\n  type: currencyActionTypes.SET_TOGGLE_HIDDEN\n});\n","import React from \"react\";\nimport \"./ConvertedList.scss\";\nimport CurrencyList from \"../currency-list/CurrencyList\";\nimport { connect } from \"react-redux\";\nimport {\n  addCurrency,\n  handleInput,\n  handleChange,\n  requestCurrencyRates,\n  handleSwap\n} from \"../../redux/converterlist/converterlist.actions\";\n\nimport uuid from \"uuid\";\n\nconst ConvertedList = ({\n  currencies,\n  amount,\n  convertedTo,\n  base,\n  handleChange,\n  handleInput,\n  addCurrency,\n  handleSwap,\n  result,\n  getCurrency\n}) => {\n  return (\n    <React.Fragment>\n      <div className=\"input-item\">\n        <input\n          className=\"input\"\n          type=\"number\"\n          value={amount}\n          onChange={event => {\n            handleInput(event);\n            getCurrency(base, amount);\n          }}\n        />\n\n        <select\n          className=\"options\"\n          name=\"base\"\n          value={base}\n          onChange={event => {\n            handleChange(event);\n            getCurrency(base, amount);\n          }}\n        >\n          {<option className=\"option\">{base}</option>}\n        </select>\n      </div>\n      <div className=\"input-item\">\n        <input\n          className=\"input\"\n          type=\"number\"\n          value={result}\n          onChange={handleInput}\n        />\n        <select\n          className=\"options  \"\n          name=\"convertedTo\"\n          value={convertedTo}\n          onChange={event => {\n            handleChange(event);\n            getCurrency(base, amount);\n          }}\n        >\n          {currencies.map((currency, index) => (\n            <option key={index}>{currency}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"input-item\">\n        <button\n          type=\"submit\"\n          className=\"btn\"\n          onClick={() =>\n            addCurrency({\n              base: base,\n              id: uuid(),\n              convertedTo: convertedTo,\n              amount: Number(amount),\n              result: Number(result)\n            })\n          }\n        >\n          Add Item\n        </button>\n        <h1\n          className=\"swap\"\n          onClick={() => {\n            handleSwap();\n            getCurrency(convertedTo, amount);\n          }}\n        >\n          &#8595;&#8593;\n        </h1>\n      </div>\n      <CurrencyList />\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({\n  converterlist: { amount, base, result, currencies, convertedTo }\n}) => ({\n  amount,\n  base,\n  result,\n  currencies,\n  convertedTo\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addCurrency: item => dispatch(addCurrency(item)),\n  handleInput: event => dispatch(handleInput(event.target.value)),\n  handleChange: event => dispatch(handleChange(event.target.value)),\n  handleSwap: () => dispatch(handleSwap()),\n  getCurrency: (base, amount) => dispatch(requestCurrencyRates(base, amount))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConvertedList);\n","import React from \"react\";\nimport \"./Converter.scss\";\nimport ConvertedList from \"../converter-list/ConvertedList\";\nimport { connect } from \"react-redux\";\nimport { requestCurrencyRates } from \"../../redux/converterlist/converterlist.actions\";\n\nclass Converter extends React.Component {\n  componentDidMount() {\n    this.props.getCurrency(this.props.base, this.props.amount);\n  }\n\n  render() {\n    const { base, result, date, convertedTo, amount } = this.props;\n    return (\n      <div className=\"converter\">\n        <div className=\"converter-content\">\n          <h1 className=\"title\">Currency Converter </h1>\n          <h3 className=\"subtitle\">\n            {amount}\n            {base} equals:\n            <span>\n              {result} {convertedTo}\n            </span>\n          </h3>\n          <h3 className=\"date\">{date}</h3>\n          <ConvertedList />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  converterlist: { amount, date, base, convertedTo, result }\n}) => ({\n  amount,\n  date,\n  base,\n  convertedTo,\n  result\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrency: (base, amount) => dispatch(requestCurrencyRates(base, amount))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Converter);\n","import React from \"react\";\nimport \"./HomePage.scss\";\nimport Converter from \"../../components/converter/Converter\";\nconst HomePage = () => {\n  return (\n    <div className=\"homepage\">\n      <Converter />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./page/homepage/HomePage\";\n\nfunction App() {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import currencyActionTypes from \"./currency.type\";\n\nconst INITIAL_STATE = {\n  hidden: true\n};\n\nconst currencyReducer = (state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case currencyActionTypes.SET_TOGGLE_HIDDEN: {\n      return {\n        ...state,\n        hidden: !state.hidden\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default currencyReducer;\n","import converterListActionTypes from \"./converterlist.types\";\nimport uuid from \"uuid\";\nconst INITIAL_STATE = {\n  isPending: true,\n  currencyList: [],\n  currencies: [],\n  amount: 1,\n  id: uuid(),\n  base: \"EUR\",\n  result: \"\",\n  date: \"\",\n  convertedTo: \"PLN\",\n  error: \"\"\n};\n\nconst converterListReducer = (state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case converterListActionTypes.ADD_CURRENCY: {\n      return {\n        ...state,\n        currencyList: [...state.currencyList, action.payload]\n      };\n    }\n    case converterListActionTypes.CLEAR_CURRENCY: {\n      return {\n        ...state,\n        currencyList: state.currencyList.filter(\n          (currencyItem, index) => currencyItem.id !== action.payload[index].id\n        )\n      };\n    }\n    case converterListActionTypes.REMOVE_CURRENCY: {\n      return {\n        ...state,\n        currencyList: state.currencyList.filter(\n          currencyItem => currencyItem.id !== action.payload\n        )\n      };\n    }\n    case converterListActionTypes.HANDLE_INPUT: {\n      return {\n        ...state,\n        amount: Number(action.payload)\n      };\n    }\n    case converterListActionTypes.HANDLE_CHANGE: {\n      return {\n        ...state,\n        convertedTo: action.payload\n      };\n    }\n\n    case converterListActionTypes.HANDLE_SWAP: {\n      return {\n        ...state,\n        convertedTo: state.base,\n        base: state.convertedTo\n      };\n    }\n    case converterListActionTypes.REQUEST_RATES_PENDING: {\n      return {\n        ...state,\n        isPending: true\n      };\n    }\n    case converterListActionTypes.REQUEST_RATES_SUCCESS: {\n      return {\n        ...state,\n        isPending: false,\n        currencies: Object.keys(action.payload.rates),\n        result: Number(\n          (action.payload.rates[state.convertedTo] * state.amount).toFixed(2)\n        ),\n        date: action.payload.date\n      };\n    }\n    case converterListActionTypes.REQUEST_RATES_FAILED: {\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default converterListReducer;\n","import { combineReducers } from \"redux\";\n\nimport currencyReducer from \"./currency/currency.reducer\";\nimport converterlistReducer from \"./converterlist/converterlist.reducer\";\n\nexport default combineReducers({\n  currency: currencyReducer,\n  converterlist: converterlistReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst middlewares = [thunkMiddleware];\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}